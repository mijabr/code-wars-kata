using FluentAssertions;
using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CodeWarsKata.kyu_4
{
    public class Calculator
    {
        public string Multiply(string number1, string number2)
        {
            var digits1 = number1.Select(digit => digit - '0').ToArray();
            var digits2 = number2.Select(digit => digit - '0').ToArray();

            var lineResults = new List<List<int>>();
            var digitIndex2 = number2.Length - 1;
            while (digitIndex2 >= 0)
            {
                var carry = 0;
                var lineDigits = new List<int>();
                for (var z = number2.Length - 1; z > digitIndex2; z--)
                {
                    lineDigits.Add(0);
                }

                var digitIndex1 = digits1.Length - 1;
                while (digitIndex1 >= 0)
                {
                    var result = digits1[digitIndex1] * digits2[digitIndex2] + carry;
                    lineDigits.Add(result % 10);
                    carry = result / 10;
                    digitIndex1--;
                }

                while (carry > 0)
                {
                    lineDigits.Add(carry % 10);
                    carry /= 10;
                }

                lineResults.Add(lineDigits);
                digitIndex2--;
            }

            var total = new List<int>();
            var more = true;
            var totalIndex = 0;
            var totalCarry = 0;
            while (more)
            {
                more = false;

                var digitTotal = 0;
                foreach (var lineResult in lineResults)
                {
                    if (lineResult.Count > totalIndex)
                    {
                        digitTotal += lineResult[totalIndex];
                        more = true;
                    }
                }

                digitTotal += totalCarry;

                total.Add(digitTotal % 10);
                totalCarry = digitTotal / 10;

                totalIndex++;
            }

            var nonZero = false;
            var sb = new StringBuilder();
            for (var index = total.Count - 1; index >= 0; index--)
            {
                if (total[index] > 0 || nonZero)
                {
                    sb.Append((char) (total[index] + '0'));
                    nonZero = true;
                }
            }

            return sb.ToString();
        }

    }

    public class Kata
    {
        public static string Factorial(int n)
        {
            var calculator = new Calculator();
            var factor = 1;
            var result = "1";
            while (n > 0)
            {
                result = calculator.Multiply(result, factor.ToString());
                factor++;
                n--;
            }

            return result;
        }
    }

    [TestFixture]
    public class CalculatorTests
    {
        private Calculator calculator;

        [SetUp]
        public void SetUp()
        {
            calculator = new Calculator();
        }

        [Test]
        public void CanMultiplySingleDigits()
        {
            calculator.Multiply("1", "2").Should().Be("2");
            calculator.Multiply("3", "2").Should().Be("6");
        }

        [Test]
        public void CanMultiplySingleDigitsForDoubleDigitResult()
        {
            calculator.Multiply("7", "8").Should().Be("56");
            calculator.Multiply("5", "8").Should().Be("40");
        }

        [Test]
        public void CanMultiplySingleAndDoubleDigits()
        {
            calculator.Multiply("10", "2").Should().Be("20");
            calculator.Multiply("52", "20").Should().Be("1040");
            calculator.Multiply("456", "768").Should().Be("350208");
            calculator.Multiply("504", "7200").Should().Be("3628800");
        }
    }

    [TestFixture]
    public class KataTests
    {
        [Test]
        public void BasicTests()
        {
            Kata.Factorial(1).Should().Be("1");
            Kata.Factorial(5).Should().Be("120");
            Kata.Factorial(9).Should().Be("362880");
            Kata.Factorial(15).Should().Be("1307674368000");
            Kata.Factorial(25).Should().Be("15511210043330985984000000");
            Kata.Factorial(50).Should().Be("30414093201713378043612608166064768844377641568960512000000000000");

            Kata.Factorial(100).Should().Be(
                "933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852" +
                "10916864000000000000000000000000");

            Kata.Factorial(500).Should().Be(
                "122013682599111006870123878542304692625357434280319284219241358838584537315388199760549644750220328186301361647714820358416337" +
                "872207817720048078520515932928547790757193933060377296085908627042917454788242491272634430567017327076946106280231045264421887" +
                "878946575477714986349436778103764427403382736539747138647787849543848959553753799042324106127132698432774571554630997720278101" +
                "456108118837370953101635632443298702956389662891165897476957208792692887128178007026517450776841071962439039432253642260523494" +
                "585012991857150124870696156814162535905669342381300885624924689156412677565448188650659384795177536089400574523894033579847636" +
                "394490531306232374906644504882466507594673586207463792518420045936969298102226397195259719094521782333175693458150855233282076" +
                "282002340262690789834245171200620771464097945611612762914595123722991334016955236385094288559201872743379517301458635757082835" +
                "578015873543276888868012039988238470215146760544540766353598417443048012893831389688163948746965881750450692636533817505547812" +
                "8640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

            Kata.Factorial(1000).Should().Be(
                "402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666" +
                "872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056" +
                "393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667" +
                "797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611" +
                "036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164" +
                "365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900" +
                "950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761" +
                "926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276" +
                "862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187" +
                "361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933" +
                "061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860" +
                "788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821" +
                "885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900" +
                "140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884" +
                "387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520" +
                "158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248" +
                "757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028" +
                "510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271" +
                "243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000");
        }
    }
}
